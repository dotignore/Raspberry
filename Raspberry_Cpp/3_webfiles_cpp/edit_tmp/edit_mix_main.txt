#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/ServerSocket.h"
#include "Poco/Util/ServerApplication.h"
#include <iostream>

#include <wiringPi.h>
#include <stdio.h>

using namespace Poco;
using namespace Poco::Net;
using namespace Poco::Util;

#define LedPin    0								// int LED = 2;
#define ButtonPin 1								// int pinButton = 8;


class HelloRequestHandler: public HTTPRequestHandler
{
    void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response)
    {
        Application& app = Application::instance();
        app.logger().information("Request from %s", request.clientAddress().toString());

        response.setChunkedTransferEncoding(true);
        response.setContentType("text/html");

        response.send()
                << "<html>"
                << "<head><title>Hello</title></head>"
                << "<body><h1>Hello from the POCO Web Server</h1></body>"
                << "</html>";
    }
};

class HelloRequestHandlerFactory: public HTTPRequestHandlerFactory
{
    HTTPRequestHandler* createRequestHandler(const HTTPServerRequest&)
    {
        return new HelloRequestHandler;
    }
};

class WebServerApp: public ServerApplication
{
    void initialize(Application& self)
    {
        loadConfiguration();
        ServerApplication::initialize(self);
    }

    int main(const std::vector<std::string>&)
    {

// ######################################################################
        //when initialize wiring failed,print messageto screen
        if (wiringPiSetup() == -1)
        {
            printf("setup wiringPi failed !");
            return 1;
        }

        int stateLED = LOW;

        int stateButton;
        long time = 0;
        long debounce = 500;

        pinMode(LedPin, OUTPUT);	// pinMode(LED, OUTPUT);
        pinMode(ButtonPin, INPUT);	// pinMode(pinButton, INPUT);

        digitalRead(ButtonPin) == 0; // pin ON

        //pull up to 3.3V,make GPIO1 a stable level
        pullUpDnControl(ButtonPin, PUD_UP);

        while (1)
        {
            stateButton = (digitalRead(ButtonPin) == 0);	// push pin botton
            if (stateButton == HIGH &&						// если кнопка нажата
                millis() - time > debounce)					// убирает дребез кнопки
            {
                if (stateLED == HIGH)						// | change digitalWrite
                {											// |
                    stateLED = LOW;							// |
                }											// |
                else 										// |
                {											// |
                    stateLED = HIGH;						// |
                }											// |
                time = millis();							// убирает дребез кнопки
            }											    // |
            digitalWrite(LedPin, stateLED);					// | digitalWrite(LedPin, HIGH);  // led OFF
            // | digitalWrite(LedPin, LOW);   // led ON

            //printf("stateButton = %d\n", stateButton);		//int d
            //printf("debounce = %ld\n\n", debounce);			//long l

        }

// ######################################################################

        UInt16 port = static_cast<UInt16>(config().getUInt("port", 8080));

        HTTPServer srv(new HelloRequestHandlerFactory, port);
        srv.start();
        logger().information("HTTP Server started on port %hu.", port);
        waitForTerminationRequest();
        logger().information("Stopping HTTP Server...");
        srv.stop();

        return Application::EXIT_OK;

    }
};

POCO_SERVER_MAIN(WebServerApp)