#include<iostream>
using namespace std;

class SimpleCat{
public:
    SimpleCat()             {cout << "this" << this << endl;}  // это понятно                              02 шаг this	0x00007fff5fbff7b8
    SimpleCat(SimpleCat& Link)   {cout << "2: Simple Cat Copy Constructor..." << endl;}  // 05 шаг this 0x7fff5fbff7a0   09 шаг this	0x7fff5fbff7a8
    ~SimpleCat()            {cout << "Destructor..." << endl; cout << "this" << this << endl;}          //  12 шаг
};

SimpleCat FunctionOne(SimpleCat theCat){
    cout << "2: Function One. Returning..." << endl;                    //  07 шаг theCat 0x00007fff5fbff7a0
    return theCat;                                                      //  08 шаг  10 шаг
}




int main(){
    SimpleCat Frisky;           // создаём объект Фриски класса СимплеКэт   01 шаг
    
    cout << "2: Calling FunctionOne..." << endl;                        //  03 шаг
    FunctionOne(Frisky);                                                //  04 шаг  06 шаг  11 шаг

    return 0;
}

/*
2: Calling FunctionOne...
2: Simple Cat Copy Constructor...
2: Function One. Returning...
2: Simple Cat Copy Constructor...
Destructor...
Destructor...
Destructor...
Program ended with exit code: 0
*/







/*

#include<iostream>
using namespace std;

class SimpleCat{            //определяем класс
public:
    SimpleCat()             {cout << "1: Simple Cat Constructor..." << endl;}   // 02 шаг 0x7fff5fbff798
    // this	SimpleCat *	0x7fff5fbff798
    
    SimpleCat(SimpleCat&)   {
        cout << "2: Simple Cat Copy Constructor..." << endl;                    // 05 шаг 0x7fff5fbff780    10 шаг
        cout << "\t\t\tthis..." << this << endl;                                // 05 шаг 0x7fff5fbff780    10 шаг 0x7fff5fbff788
    // this	SimpleCat *	0x7fff5fbff780  05 шаг
    //	SimpleCat &	0x00007fff5fbff798  05 шаг
    //
    // this	SimpleCat *	0x7fff5fbff788  10 шаг
    // SimpleCat &	0x00007fff5fbff780  10 шаг
    }
    
    ~SimpleCat()            {cout << "Destructor..." << endl;}
    // this	SimpleCat *	0x7fff5fbff788                                              13 шаг  деструктор для 0x7fff5fbff788
    // this	SimpleCat *	0x100001465
    // this	SimpleCat *	0x7fff5fbff788
    // this	SimpleCat *	0x7fff5fbff780
    // this	SimpleCat *	0x100001465                                                 15 шаг деструктор для 0x100001465
    // this	SimpleCat *	0x7fff5fbff780
};

SimpleCat FunctionOne (SimpleCat theCat);

int main(){
    SimpleCat Frisky;       // 1: создаем объект Frisky класса SimpleCat               01 шаг
    cout << "\t\t\t&Frisky1..." << &Frisky << endl << endl;                         // 03 шаг 0x7fff5fbff798

    FunctionOne(Frisky);    // 2: по логике мы дальше дожны идти в SimpleCat FunctionOne (SimpleCat theCat)
                                                                                    //  04 шаг (SimpleCat) Frisky = {}
                                                                                    //  06 шаг (SimpleCat) Frisky = {}
                                                                                    //  12 шаг 14 шаг
    cout << "\t\t\t&Frisky2..." << &Frisky << endl;                                 // 16 шаг 0x7fff5fbff798
    
    return 0;
}

SimpleCat FunctionOne(SimpleCat theCat){
    cout << "2: Function One. Returning..." << endl;                                //  07 шаг 0x00007fff5fbff780
    // theCat	SimpleCat &	0x00007fff5fbff780
    cout << "\t\t\t&theCat..." << &theCat << endl;                                  //  08 шаг 0x7fff5fbff780
    //cout << "\t\t\t theCat..." << theCat << endl;
    return theCat;                                                                  //  09 шаг              11 шаг
    //theCat	SimpleCat &	0x00007fff5fbff780
}

*/








/*          //         передачя ссылки
#include<iostream>
using namespace std;

class SimpleCat{
public:
    SimpleCat()             {cout << "1: Simple Cat Constructor..." << endl;}

    ~SimpleCat()            {cout << endl << "Destructor..." << endl;}
};

 SimpleCat * FunctionTwo (SimpleCat * theCat);

int main(){
    SimpleCat Frisky;       // 1: Вызвали класс class SimpleCat{....}
    cout << "SimpleCat Frisky " << &Frisky << endl;
    
    FunctionTwo(&Frisky);   // 3: Передали ссылку 0x7fff5fbff79 класса в функцию FunctionTwo (создав указатель * theCat на класс class SimpleCat{....})
    cout << endl << "FunctionTwo(&Frisky) " << &Frisky << endl;
    
    return 0;
}

SimpleCat * FunctionTwo(SimpleCat * theCat){
     cout << endl << "3: Function Two. Returning..." << endl;
     cout << "&theCat " << &theCat << endl;
     cout << "theCat " << theCat << endl;
   return theCat;
 }
*/







/*              //          ОРИГИНАЛ
// Листинг 9,10
// Передачя указателей на объекты
#include<iostream>
using namespace std;

class SimpleCat{
public:
    SimpleCat();            // конструктор
    SimpleCat(SimpleCat&);  // конструктор
    ~SimpleCat();           // конструктор
};


SimpleCat::SimpleCat(){
    cout << "1: Simple Cat Constructor..." << endl << endl;
}
SimpleCat::SimpleCat(SimpleCat&){
    cout << "2: Simple Cat Copy Constructor..." << endl;
}

SimpleCat::~SimpleCat(){
    cout << "Destructor..." << endl;
}

SimpleCat FunctionOne (SimpleCat theCat);
SimpleCat * FunctionTwo (SimpleCat * theCat);

int main(){
    
    cout << "1: Making a cat..." << endl;
    SimpleCat Frisky;
    
    cout << "2: Calling FunctionOne..." << endl;
    FunctionOne(Frisky);
    
    cout << endl << "3: Calling FunctionTwo..." << endl;
    FunctionTwo(&Frisky);
    
    return 0;
}

// Функция Function, передачя как значения
SimpleCat FunctionOne(SimpleCat theCat){
    cout << "2: Function One. Returning..." << endl;
    return theCat;
}

// Функция FunctionTwo, передачя как ссылки
SimpleCat * FunctionTwo(SimpleCat * theCat){
    cout << "3: Function Two. Returning..." << endl;
    return theCat;
}

*/